<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">281</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Token_SuspendResume" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">client_credentials</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
              <elementProp name="client_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">cf852391-2e49-43bc-9447-ff6b4e64edbe</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_id</stringProp>
              </elementProp>
              <elementProp name="client_secret" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">bc07f836-e035-43a7-b9fa-4ae13503d39c09120e89-272e-4ec7-b584-520b9fb8193d</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_secret</stringProp>
              </elementProp>
              <elementProp name="scope" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">768</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">scope</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">apigw-st.tsl.telus.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/st/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="c_Token" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">c_Token</stringProp>
            <stringProp name="RegexExtractor.regex">access_token&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Token_Failed</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <RunTime guiclass="RunTimeGui" testclass="RunTime" testname="Runtime Controller" enabled="true">
          <stringProp name="RunTime.seconds">290</stringProp>
        </RunTime>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Activation_SuspendService" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;id&quot;:&quot;${ServiceID}&quot;,&#xd;
	&quot;@baseType&quot;:&quot;ServiceActivationAndConfiguration&quot;,&#xd;
	&quot;@type&quot;: &quot;IPTVServiceActivationAndConfiguration&quot;,	&#xd;
	&quot;isAVSEnabled&quot;: &quot;FALSE&quot;,&#xd;
	&quot;serviceDate&quot;: &quot;2021-10-12T12:15:39.434Z&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apigw-private-yul-np-001.cloudapps.telus.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/service/iptvServiceActivationAndConfiguration/v1/service/${ServiceID}/</stringProp>
            <stringProp name="HTTPSampler.method">PATCH</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="SuspendResumeServiceID" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">SuspendResumeServiceID.csv</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.group</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">ServiceID</stringProp>
            </CSVDataSet>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${c_Token}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">env</stringProp>
                  <stringProp name="Header.value">st01</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1850512524">georange</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${mydelay}</stringProp>
            <stringProp name="TestPlan.comments">${mydelay}</stringProp>
          </TestAction>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">Long pacing = 20000 - prev.getTime();

//log.info(&quot;pacing&quot;);
//log.info(String.valueOf(prev.getTime()));

if (pacing &gt; 0) {
    Integer iPacing = pacing != null ? pacing.intValue() : null;
//    log.info(String.valueOf(iPacing));  
    vars.put(&quot;mydelay&quot;, String.valueOf(iPacing));
//   log.info(vars.get(&quot;mydelay&quot;));
    return mydelay;
} else {
    vars.put(&quot;mydelay&quot;, &quot;0&quot;);
//     log.info(&quot;mydelay&quot;);
    return 0;
}</stringProp>
            </BeanShellTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Activation_ResumeService" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;id&quot;:&quot;${ServiceID}&quot;,&#xd;
	&quot;@baseType&quot;:&quot;ServiceActivationAndConfiguration&quot;,&#xd;
	&quot;@type&quot;: &quot;IPTVServiceActivationAndConfiguration&quot;,	&#xd;
	&quot;isAVSEnabled&quot;: &quot;TRUE&quot;,&#xd;
	&quot;serviceDate&quot;: &quot;${ServiceDate}&quot;,&#xd;
 	&quot;feature&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: &quot;1&quot;,&#xd;
      &quot;name&quot;: &quot;Subscription&quot;,&#xd;
      &quot;featureCharacteristic&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: &quot;100&quot;,&#xd;
          &quot;name&quot;: &quot;SubscriptionFeatureCharacteristic&quot;,&#xd;
          &quot;valueType&quot;: &quot;object&quot;,&#xd;
          &quot;value&quot;: [&#xd;
            {&#xd;
              &quot;subscriptionList&quot;: [&#xd;
                {&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subscription&quot;: &quot;Alacarte-AE&quot;,&#xd;
                  &quot;action&quot;: &quot;Assign&quot;&#xd;
                },&#xd;
                {&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subscription&quot;: &quot;Alacarte-Al Jazeera&quot;,&#xd;
                  &quot;action&quot;: &quot;Assign&quot;&#xd;
                },&#xd;
                {&#xd;
                 &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subscription&quot;: &quot;Alacarte-BeIN Sports&quot;,&#xd;
                  &quot;action&quot;: &quot;Assign&quot;&#xd;
                },&#xd;
				 {&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subscription&quot;: &quot;Alacarte-Cartoon Network&quot;,&#xd;
                  &quot;action&quot;: &quot;Assign&quot;&#xd;
                },&#xd;
                {&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subscription&quot;: &quot;Alacarte-CityTV Toronto&quot;,&#xd;
                  &quot;action&quot;: &quot;Assign&quot;&#xd;
                },&#xd;
                {&#xd;
                 &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakBase4K&quot;,&#xd;
                  &quot;action&quot;: &quot;Assign&quot;&#xd;
                },&#xd;
				{&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakCentreIce&quot;,&#xd;
                  &quot;action&quot;: &quot;Assign&quot;&#xd;
                },&#xd;
                {&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakCraveTV&quot;,&#xd;
                  &quot;action&quot;: &quot;Assign&quot;&#xd;
                },&#xd;
                {&#xd;
                 &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakEssentials3&quot;,&#xd;
                  &quot;action&quot;: &quot;Assign&quot;&#xd;
                },&#xd;
				 {&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakExtraInnings&quot;,&#xd;
                  &quot;action&quot;: &quot;Assign&quot;&#xd;
                },&#xd;
                {&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakFairchild&quot;,&#xd;
                  &quot;action&quot;: &quot;Assign&quot;&#xd;
                },&#xd;
                {&#xd;
                 &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakFamilyTime&quot;,&#xd;
                  &quot;action&quot;: &quot;Assign&quot;&#xd;
                },&#xd;
				 {&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakFavourFilms&quot;,&#xd;
                  &quot;action&quot;: &quot;Assign&quot;&#xd;
                },&#xd;
                {&#xd;
                 &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakGLXM&quot;,&#xd;
                  &quot;action&quot;: &quot;Assign&quot;&#xd;
                },&#xd;
				 {&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakHBOTMNSSEncr&quot;,&#xd;
                  &quot;action&quot;: &quot;Assign&quot;&#xd;
                },&#xd;
                {&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakKnowledge&quot;,&#xd;
                  &quot;action&quot;: &quot;Assign&quot;&#xd;
                },&#xd;
                {&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakLearningHD&quot;,&#xd;
                  &quot;action&quot;: &quot;Assign&quot;&#xd;
                },&#xd;
                {&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakLocalRadio&quot;,&#xd;
                  &quot;action&quot;: &quot;Assign&quot;&#xd;
                },&#xd;
                &#xd;
				 {&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakMovie6&quot;,&#xd;
                  &quot;action&quot;: &quot;Assign&quot;&#xd;
                },&#xd;
                {&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakOpenfit&quot;,&#xd;
                  &quot;action&quot;: &quot;Assign&quot;&#xd;
                },&#xd;
                &#xd;
                {&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakPrimeTime&quot;,&#xd;
                  &quot;action&quot;: &quot;Assign&quot;&#xd;
                },&#xd;
                {&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakSundayTicket&quot;,&#xd;
                  &quot;action&quot;: &quot;Assign&quot;&#xd;
                },&#xd;
                {&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakTVStreamer&quot;,&#xd;
                  &quot;action&quot;: &quot;Assign&quot;&#xd;
                },&#xd;
                {&#xd;
                 &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakVariety&quot;,&#xd;
                  &quot;action&quot;: &quot;Assign&quot;&#xd;
                },&#xd;
			{&#xd;
                  &quot;subEffectiveDate&quot;: &quot;${EffectiveDate}&quot;,&#xd;
                  &quot;subExpiryDate&quot;: &quot;&quot;,&#xd;
                  &quot;subscription&quot;: &quot;PakWorldBeyond&quot;,&#xd;
                  &quot;action&quot;: &quot;Assign&quot;&#xd;
                }&#xd;
                            ]&#xd;
                        }&#xd;
                    ]&#xd;
                }&#xd;
            ]&#xd;
        }&#xd;
    ]&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apigw-private-yul-np-001.cloudapps.telus.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/service/iptvServiceActivationAndConfiguration/v1/service/${ServiceID}/</stringProp>
            <stringProp name="HTTPSampler.method">PATCH</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${c_Token}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">env</stringProp>
                  <stringProp name="Header.value">st01</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="SuspendResumeServiceID" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">SuspendResumeServiceID.csv</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">ServiceID</stringProp>
            </CSVDataSet>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ServiceDate" elementType="Argument">
                  <stringProp name="Argument.name">ServiceDate</stringProp>
                  <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS&apos;Z&apos;,,-PT5H30M,,)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="EffectiveDate" elementType="Argument">
                  <stringProp name="Argument.name">EffectiveDate</stringProp>
                  <stringProp name="Argument.value">${__timeShift(yyyy/MM/dd 00:00:00,,,,)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1850512524">georange</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.proxyHost">198.161.14.25</stringProp>
            <stringProp name="HTTPSampler.proxyPort">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${mydelay}</stringProp>
            <stringProp name="TestPlan.comments">${mydelay}</stringProp>
          </TestAction>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">Long pacing = 100000 - prev.getTime();

//log.info(&quot;pacing&quot;);
//log.info(String.valueOf(prev.getTime()));

if (pacing &gt; 0) {
    Integer iPacing = pacing != null ? pacing.intValue() : null;
//    log.info(String.valueOf(iPacing));  
    vars.put(&quot;mydelay&quot;, String.valueOf(iPacing));
//   log.info(vars.get(&quot;mydelay&quot;));
    return mydelay;
} else {
    vars.put(&quot;mydelay&quot;, &quot;0&quot;);
//     log.info(&quot;mydelay&quot;);
    return 0;
}</stringProp>
            </BeanShellTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
