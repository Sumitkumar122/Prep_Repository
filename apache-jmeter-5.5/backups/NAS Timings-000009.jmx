<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">2</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV for  INITIAL_PROCESS timings" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">C:/Users/sumit.kumar10/Downloads/Timing count commands.txt</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">i_time</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV for Pre_process timings" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">C:/Users/sumit.kumar10/Downloads/Timing count commands.txt</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">pre_time</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV for Process timings" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">C:/Users/sumit.kumar10/Downloads/Timing count commands.txt</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">pro_time</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV for Distribution timings" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">C:/Users/sumit.kumar10/Downloads/Timing count commands.txt</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">d_time</stringProp>
        </CSVDataSet>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command for timings INITIAL_PROCESS.Initial  (GMT)" enabled="true">
          <stringProp name="TestPlan.comments">using &amp;&amp; sapration, can execute Timing on multiple directory</stringProp>
          <stringProp name="hostname">btln001852</stringProp>
          <intProp name="port">22</intProp>
          <intProp name="connectionTimeout">5000</intProp>
          <stringProp name="username">mzwrk1</stringProp>
          <stringProp name="password">telus2015</stringProp>
          <stringProp name="sshkeyfile"></stringProp>
          <stringProp name="passphrase"></stringProp>
          <stringProp name="command">${i_time}</stringProp>
          <boolProp name="useReturnCode">true</boolProp>
          <boolProp name="useTty">false</boolProp>
          <boolProp name="printStdErr">true</boolProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Time</stringProp>
            <stringProp name="RegexExtractor.regex">Apr(.*?)\n</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">novalue</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Time1</stringProp>
            <stringProp name="RegexExtractor.regex">Apr(.*?)\n</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">novalue</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller forINITIAL_PROCESS.Initial" enabled="true">
          <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Writer" enabled="true">
            <stringProp name="BeanShellSampler.query">String Filenamedynamic =&quot;MZ_Timing_Initial.csv&quot;;
File file = new File(Filenamedynamic);
FileWriter fstream = new FileWriter(file, true);
BufferedWriter out = new BufferedWriter(fstream);
log.info(&quot;Apr${__V(Time_${Time_matchNr})}&quot;);
Start_Date=&quot;Apr${__V(Time_${Time_matchNr})}&quot;;
End_Date=&quot;Apr${Time1}&quot;;
log.info(&quot;Apr${Time1}&quot;);
out.write(&quot;${time}_StartDate :&quot;+Start_Date+&quot;\n&quot;+&quot;${time}_EndDate :&quot;+End_Date+&quot;\n&quot;);
out.close();
fstream.close();</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">prev.setIgnore();</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command for timings Pre_PROCESS WFG (GMT)" enabled="false">
          <stringProp name="TestPlan.comments">using &amp;&amp; sapration, can execute Timing on multiple directory</stringProp>
          <stringProp name="hostname">btln001852</stringProp>
          <intProp name="port">22</intProp>
          <intProp name="connectionTimeout">5000</intProp>
          <stringProp name="username">mzwrk1</stringProp>
          <stringProp name="password">telus2015</stringProp>
          <stringProp name="sshkeyfile"></stringProp>
          <stringProp name="passphrase"></stringProp>
          <stringProp name="command">${pre_time}</stringProp>
          <boolProp name="useReturnCode">true</boolProp>
          <boolProp name="useTty">false</boolProp>
          <boolProp name="printStdErr">true</boolProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Time</stringProp>
            <stringProp name="RegexExtractor.regex">Apr(.*?)\n</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">novalue</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Time1</stringProp>
            <stringProp name="RegexExtractor.regex">Apr(.*?)\n</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">novalue</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for Pre_PROCESS WFG" enabled="false">
          <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Writer" enabled="true">
            <stringProp name="BeanShellSampler.query">String Filenamedynamic =&quot;MZ_Timing_Pre_Process.csv&quot;;
File file = new File(Filenamedynamic);
FileWriter fstream = new FileWriter(file, true);
BufferedWriter out = new BufferedWriter(fstream);
log.info(&quot;Apr${__V(Time_${Time_matchNr})}&quot;);
Start_Date=&quot;Apr${__V(Time_${Time_matchNr})}&quot;;
End_Date=&quot;Apr${Time1}&quot;;
log.info(&quot;Apr${Time1}&quot;);
out.write(&quot;${time}_StartDate :&quot;+Start_Date+&quot;\n&quot;+&quot;${time}_EndDate :&quot;+End_Date+&quot;\n&quot;);
out.close();
fstream.close();</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">prev.setIgnore();</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command for timings_PROCESS WFG  (GMT)" enabled="false">
          <stringProp name="TestPlan.comments">using &amp;&amp; sapration, can execute Timing on multiple directory</stringProp>
          <stringProp name="hostname">btln001852</stringProp>
          <intProp name="port">22</intProp>
          <intProp name="connectionTimeout">5000</intProp>
          <stringProp name="username">mzwrk1</stringProp>
          <stringProp name="password">telus2015</stringProp>
          <stringProp name="sshkeyfile"></stringProp>
          <stringProp name="passphrase"></stringProp>
          <stringProp name="command">${pro_time}</stringProp>
          <boolProp name="useReturnCode">true</boolProp>
          <boolProp name="useTty">false</boolProp>
          <boolProp name="printStdErr">true</boolProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Time</stringProp>
            <stringProp name="RegexExtractor.regex">Apr(.*?)\n</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">novalue</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Time1</stringProp>
            <stringProp name="RegexExtractor.regex">Apr(.*?)\n</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">novalue</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for PROCESS WFG" enabled="false">
          <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Writer" enabled="true">
            <stringProp name="BeanShellSampler.query">String Filenamedynamic =&quot;MZTimings.csv&quot;;
File file = new File(Filenamedynamic);
FileWriter fstream = new FileWriter(file, true);
BufferedWriter out = new BufferedWriter(fstream);
log.info(&quot;Apr${__V(Time_${Time_matchNr})}&quot;);
Start_Date=&quot;Apr${__V(Time_${Time_matchNr})}&quot;;
End_Date=&quot;Apr${Time1}&quot;;
log.info(&quot;Apr${Time1}&quot;);
out.write(&quot;${time}_StartDate :&quot;+Start_Date+&quot;\n&quot;+&quot;${time}_EndDate :&quot;+End_Date+&quot;\n&quot;);
out.close();
fstream.close();</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">prev.setIgnore();</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command for timings Distribution WFG (GMT)" enabled="false">
          <stringProp name="TestPlan.comments">using &amp;&amp; sapration, can execute Timing on multiple directory</stringProp>
          <stringProp name="hostname">btln001852</stringProp>
          <intProp name="port">22</intProp>
          <intProp name="connectionTimeout">5000</intProp>
          <stringProp name="username">mzwrk1</stringProp>
          <stringProp name="password">telus2015</stringProp>
          <stringProp name="sshkeyfile"></stringProp>
          <stringProp name="passphrase"></stringProp>
          <stringProp name="command">${d_time}</stringProp>
          <boolProp name="useReturnCode">true</boolProp>
          <boolProp name="useTty">false</boolProp>
          <boolProp name="printStdErr">true</boolProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Time</stringProp>
            <stringProp name="RegexExtractor.regex">Apr(.*?)\n</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">novalue</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Time1</stringProp>
            <stringProp name="RegexExtractor.regex">Apr(.*?)\n</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">novalue</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for Distribution WFG" enabled="false">
          <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Writer" enabled="false">
            <stringProp name="BeanShellSampler.query">String Filenamedynamic =&quot;MZTimings.csv&quot;;
File file = new File(Filenamedynamic);
FileWriter fstream = new FileWriter(file, true);
BufferedWriter out = new BufferedWriter(fstream);
log.info(&quot;Apr${__V(Time_${Time_matchNr})}&quot;);
Start_Date=&quot;Apr${__V(Time_${Time_matchNr})}&quot;;
End_Date=&quot;Apr${Time1}&quot;;
log.info(&quot;Apr${Time1}&quot;);
out.write(&quot;${time}_StartDate :&quot;+Start_Date+&quot;\n&quot;+&quot;${time}_EndDate :&quot;+End_Date+&quot;\n&quot;);
out.close();
fstream.close();</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">prev.setIgnore();</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
